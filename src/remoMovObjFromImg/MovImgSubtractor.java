package remoMovObjFromImg;

import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.InputStream;
import java.nio.Buffer;
import java.util.Scanner;

import org.opencv.*;
import org.opencv.core.*;
import org.opencv.highgui.*;
import org.opencv.video.*;
import org.opencv.imgproc.*;

import vidCapModule.VideoPanel;


public class MovImgSubtractor 
{

	private static final int String = 0;
	//global variables
	private Mat frame = null; //current frame
	private Mat fgMaskMOG = null; //fg mask generated by MOG method
	private Mat fgMaskMOG2 = null; //fg mask fg mask generated by MOG2 method
	private BackgroundSubtractor pMOG = null; //MOG Background subtractor
	private BackgroundSubtractor pMOG2 = null; //MOG2 Background subtractor
	private int keyboard = 0;
	
	static final int CV_CAP_PROP_POS_FRAMES = 1;
	
	public VideoPanel vidPanel = null;
	public VideoPanel vidPanel1 = null;
	public VideoPanel vidPanel2 = null;
	
	
	public MovImgSubtractor() 
	{
		//global variables
		frame = new Mat(); //current frame
		fgMaskMOG = null; //fg mask generated by MOG method
		fgMaskMOG2 = null; //fg mask fg mask generated by MOG2 method
		pMOG = null; //MOG Background subtractor
		pMOG2 = null; //MOG2 Background subtractor
		keyboard = 0;
	
		vidPanel  = new VideoPanel();
		vidPanel1 = new VideoPanel();
		vidPanel2 = new VideoPanel();
	}
	
	
	
	
	
	public void processVideo(String videoFilename) 
	{
	    //create the capture object
		VideoCapture capture = new VideoCapture(videoFilename);
		
	    if(!capture.isOpened()){
	        //error in opening the video input
	        System.out.println("Unable to open video file: " + videoFilename );
	        System.exit(-1);
	    }
	    
	    //read input data. ESC or 'q' for quitting
	    while( (char)keyboard != 'q' && (char)keyboard != 27 ) {
	        //read the current frame
	    	if (!capture.read(frame)) {
	    		System.out.println("Unable to read next frame.");
	    		System.out.println("Exiting...");
	    		System.exit(-1);
	    				
	    	}
	    	// update the background model
	        // AND HERE!!!
	        pMOG.apply(frame, fgMaskMOG);
	        pMOG2.apply(frame, fgMaskMOG2);
	        //capture.get
	        String str ="";
	        Rect rect1;
	        
	        org.opencv.core.Point pt1 = new org.opencv.core.Point(10, 2);
	        org.opencv.core.Point pt2 = new org.opencv.core.Point(10, 2);
	        Scalar scal = new Scalar(255,255,255);
	        //get the frame number and write it on the current frame
	        Core.rectangle(frame, pt1, pt2, scal, -1);
	        double propId = capture.get(CV_CAP_PROP_POS_FRAMES);
	        str = str + propId;
	        pt1 = new org.opencv.core.Point(15, 15);
	        pt2 = new org.opencv.core.Point(10, 2);
	        scal = new Scalar(0,0,0);
	        Core.putText(frame, str, pt1,
		            Core.FONT_HERSHEY_SIMPLEX, 0.5 , scal);
	    
	        BufferedImage buffImage = VideoPanel.matToBufferedImage(frame);
	        vidPanel.setImage(buffImage);	 
	        vidPanel.repaint();

	        buffImage = VideoPanel.matToBufferedImage(frame);
	        vidPanel.setImage(buffImage);	 
	        vidPanel.repaint();
	        
	        buffImage = VideoPanel.matToBufferedImage(fgMaskMOG);
	        vidPanel1.setImage(buffImage);	 
	        vidPanel1.repaint();
	        
	        buffImage = VideoPanel.matToBufferedImage(fgMaskMOG2);
	        vidPanel2.setImage(buffImage);	 
	        vidPanel2.repaint();
	        
	        //get the input from the keyboard
        
	        Scanner keyboard1 = new Scanner(System.in);
	        System.out.println("enter an integer");
	        keyboard = keyboard1.nextInt();
	        
	    }
	    //delete capture object
	    capture.release();
	}
	
	
	
	
	public void destroyAllWindows()
	{
	}
	
	
	public int DoAllProcessing() 
	{
		String argvList[] = {"","-vid", "D:\\Programs\\Java\\RemovObj\\sample.avi", "-img"};// new String[3];
		
	    //check for the input parameter correctness
//	    if(argc != 3) {
//	        cerr <<"Incorret input list" << endl;
//	        cerr <<"exiting..." << endl;
//	        return EXIT_FAILURE;
//	    }

//	    //create GUI windows
//	    namedWindow("Frame");
//	    namedWindow("FG Mask MOG");
//	    namedWindow("FG Mask MOG 2");

	    //create Background Subtractor objects
	   //NOTE HERE!!!!
	    pMOG  = new BackgroundSubtractorMOG(); //MOG approach
	    pMOG2 = new BackgroundSubtractorMOG2(); //MOG2 approach

	    if (argvList[1].equals("-vid") == true) {
	    	processVideo(argvList[2]);
	    } else if(argvList[1].equals("-img") == true) {
	        //input data coming from a sequence of images
	    }
	    else {
	        //error in reading input parameters
	        System.out.println("Please, check the input parameters.");
	        System.out.println("Exiting..." );
	        return -1;
	    }
	    //destroy GUI windows
	    destroyAllWindows();
	    return 0;
	}

}
